// Colour styles - hexidecimal

// For the base colours see:
// https://github.com/alphagov/govuk_frontend_toolkit/blob/master/app/assets/stylesheets/_colours.scss
// These are our custom extras

// Overriding frontend toolkit
$link-active-colour: $orange;
$link-hover-colour: $link-colour;

$inside-gov-brand: #2E3191;
$inside-gov-secondary: #57da95;
$inside-gov-nav: #0B0C0C;
$inside-gov-nav-dropdown: #888;

$coalition-green: #85994b;
$g8-brand: #c10019;

// Organisation brand colours
//
// Organisation brand colours are specified manually because there is no
// fixed rule as to what colours organisations have. Colours are defined
// by OrganisationBrandColour and its associated CSS class here.
//
// NOTE: The mixin will create a new block inside the block it is included in.
// The downside of this approach is it requires at least 3 elements to be
// able to do anything â€“ the parent element, the element with the colour
// class on and the element we're actually styling. This might be simpler
// if we did &.foo-brand-colour #{$selector} { ... }, but that will
// require refactoring.
//
// Usage:
//
//   html:
//    <div class="organisations-show">
//      <div class="cabinet-office-brand-colour">
//        <a href="...">Cabinet Office</a>
//      </div>
//    </div>
//
//   css:
//     .organisations-show {
//       a {
//         border-width: 2px;
//         border-style: solid;
//       }
//       @include organisation-brand-colour("a", border-color);
//     }

@mixin organisation-brand-colour($selector, $property, $websafe: false) {
  @each $organisation in $all-organisation-brand-colours {
    .#{nth($organisation, 1)}-brand-colour #{$selector} {
      @if $websafe {
        #{$property}: nth($organisation, 3);
      }
      @else {
        #{$property}: nth($organisation, 2);
      }
    }
  }
}
